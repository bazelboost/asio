load("@rules_cc//cc:defs.bzl", "cc_library")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

_ssl_srcs = [
    "include/boost/asio/ssl/**/*.hpp",
    "include/boost/asio/ssl/**/*.ipp",
    "include/boost/asio/ssl/**/*.cpp",
]

_ssl_hdrs = [
    "include/boost/asio/ssl/**/*.hpp",
    "include/boost/asio/ssl/**/*.ipp",
]

_impl_hdr = "include/boost/asio/impl/src.hpp"
_ssl_impl_hdr = "include/boost/asio/ssl/impl/src.hpp"

_srcs = [
    "include/boost/**/*.hpp",
    "include/boost/**/*.ipp",
    "include/boost/**/*.cpp",
]

_deprecated_srcs = [
    "include/boost/asio/impl/src.cpp",
]

_internal_hdrs = [
    "include/boost/detail/**/*.hpp",
    "include/boost/detail/**/*.ipp",
]

_windows_hdrs = [
    "include/boost/asio/windows/*.hpp",
]

_posix_hdrs = [
    "include/boost/asio/posix/*.hpp",
]

constraint_setting(
    name = "ssl",
    visibility = ["//visibility:public"],
    default_constraint_value = ":no_ssl",
)

constraint_value(
    name = "no_ssl",
    visibility = ["//visibility:public"],
    constraint_setting = "ssl",
)

constraint_value(
    name = "openssl",
    visibility = ["//visibility:public"],
    constraint_setting = "ssl",
)

constraint_value(
    name = "boringssl",
    visibility = ["//visibility:public"],
    constraint_setting = "ssl",
)

write_file(
    name = "compilation_src",
    out = "bazel_asio_compilation_src.cpp",
    content = [
        "#include <boost/asio/impl/src.hpp>",
    ],
)

write_file(
    name = "compilation_ssl_src",
    out = "bazel_asio_compilation_ssl_src.cpp",
    content = [
        "#include <boost/asio/impl/src.hpp>",
        "#include <boost/asio/ssl/impl/src.hpp>",
    ],
)

cc_library(
    name = "asio_windows",
    hdrs = glob(_windows_hdrs),
    linkopts = [
        "-DEFAULTLIB:ws2_32",
        "-DEFAULTLIB:mswsock",
    ],
)

cc_library(
    name = "asio_posix",
    hdrs = glob(_posix_hdrs),
    linkopts = ["-lpthread"],
)

cc_library(
    name = "asio_internal",
    includes = ["include"],
    hdrs = glob(["include/**/*.hpp", "include/**/*.ipp"]),
    defines = ["BOOST_ASIO_SEPARATE_COMPILATION=1"],
    srcs = glob(_srcs, exclude = _deprecated_srcs + _ssl_srcs) + select({
        ":no_ssl": [":compilation_src"],
        ":openssl": [":compilation_ssl_src"],
        ":boringssl": [":compilation_ssl_src"],
    }) + select({
        ":no_ssl": [],
        ":openssl": [_ssl_impl_hdr],
        ":boringssl": [_ssl_impl_hdr],
    }),
    deps = [
        "@boost//libs/config",
        "@boost//libs/system",
        "@boost//libs/throw_exception",
        "@boost//libs/assert",
        "@boost//libs/date_time",
        "@boost//libs/smart_ptr",
        "@boost//libs/regex",
    ] + select({
        ":no_ssl": [],
        ":openssl": ["@org_openssl//:ssl"],
        ":boringssl": ["@boringssl//:ssl"],
    }),
)

cc_library(
    name = "asio",
    visibility = ["//visibility:public"],
    includes = ["include"],
    defines = ["BOOST_ASIO_SEPARATE_COMPILATION=1"],
    hdrs = glob(["include/**/*.hpp"], exclude = _internal_hdrs + _windows_hdrs + _posix_hdrs + _ssl_hdrs + [_impl_hdr, _ssl_impl_hdr]) + select({
        ":no_ssl": [],
        ":openssl": glob(_ssl_hdrs, exclude = [_ssl_impl_hdr]),
        ":boringssl": glob(_ssl_hdrs, exclude = [_ssl_impl_hdr]),
    }),
    strip_include_prefix = "include",
    deps = [
        ":asio_internal",
        "@boost//libs/bind",
        "@boost//libs/regex",
        "@boost//libs/date_time",
    ] + select({
        "@platforms//os:windows": [":asio_windows"],
        "//conditions:default": [":asio_posix"],
    }),
)
